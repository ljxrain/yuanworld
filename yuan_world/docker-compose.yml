version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: yuan_world_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: yuan_world
      POSTGRES_USER: ljxrain
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./yuan_world_full.dump:/docker-entrypoint-initdb.d/backup.dump:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ljxrain -d yuan_world"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yuan_world_network

  # 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: yuan_world_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: yuan_world
      DB_USER: ljxrain
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE:-7d}
      PORT: 8080
      LAOZHANG_API_URL: ${LAOZHANG_API_URL}
      LAOZHANG_API_KEY: ${LAOZHANG_API_KEY}
    ports:
      - "8080:8080"
    volumes:
      - ./public/images:/app/public/images
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - yuan_world_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: yuan_world_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./public:/usr/share/nginx/html/public:ro
    depends_on:
      - app
    networks:
      - yuan_world_network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local

networks:
  yuan_world_network:
    driver: bridge
